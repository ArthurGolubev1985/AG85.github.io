<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
        <title>Data structure tree AG85DST1 by Arthur Golubev 19850316</title>
        <meta name="changed" content="2025-03-04T17:00:00"/>
        <meta name="description" content="By Arthur Golubev 19850316 (ArthurGolubev19850316) data structure tree ag85dst1."/>
        <meta name="keywords" content="Arthur Golubev 19850316, Артур Голубев 19850316, Голубев Артур 19850316, Артур Петрович Голубев 19850316, Голубев Артур Петрович 19850316, ArthurGolubev19850316, АртурГолубев19850316, ГолубевАртур19850316, АртурПетровичГолубев19850316, ГолубевАртурПетрович19850316, arthurgolubev.site, arthur-golubev.site, www.arthurgolubev.site, www.arthur-golubev.site, arthurgolubev.22web.org, arthur-golubev.22web.org, www.arthurgolubev.22web.org, www.arthur-golubev.22web.org, ArthurGolubev.com, Arthur-Golubev.com, www.ArthurGolubev.com, www.Arthur-Golubev.com, information technologies, IT, computing science, programming, information systems, information systems solutions, information systems engineering, information systems development, software engineering, software development, hardware engineering, hardware development, engineering checklists, concepts checklists, concepts engineering checklists, general system engineering checklist, concepts and implementation checklist for general system engineering, checklist for data storing, concepts checklist for data storing, checklist for multithreading, concepts checklist for multithreading, checklist for orderings, concepts checklist for orderings, algorithms, data structures, parallel systems, parallel algorithms, parallel data structures, distributed systems, distributed algorithms, distributed data structures, concurrent systems, concurrent algorithms, concurrent data structures, parallel concurrent systems, parallel concurrent algorithms, parallel concurrent data structures, sequential algorithms, single-threaded algorithms, multi-threaded algorithms, consensus systems, consensus algorithms, consensus protocols, consensus solutions, blockchain systems, blockchain solutions, code, code examples, code samples, code libraries, Useful Algorithms Code, useful algorithms code, algorithms code, Useful Data Structures Code, useful data structures code, data structures code, parallel systems code, parallel algorithms code, parallel data structures code, distributed systems code, distributed algorithms code, distributed data structures code, concurrent systems code, concurrent algorithms code, concurrent data structures code, parallel concurrent systems code, parallel concurrent algorithms code, parallel concurrent data structures code, sequential algorithms code, single-threaded algorithms code, multi-threaded algorithms code, consensus systems code, consensus algorithms code, consensus protocols code, consensus solutions code, blockchain code, blockchain systems code, blockchain solutions code, self-documented code, explaining systems with program code, explaining algorithms with program code, explaining data structures with program code, system performance, software performance, program code performance, code style, code style references, Arthur Golubev 1985 curriculum vitae, Arthur Golubev 1985 cv, ArthurGolubev1985 curriculum vitae, ArthurGolubev1985 cv, some contacting info for Arthur Golubev, some contacting info for Arthur Golubev 1985, some contacting info for ArthurGolubev, some contacting info for ArthurGolubev1985
        , data structure tree ag85dst1
        "
        />
        <meta name="robots" content="index,follow"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <link rel="icon" href="/logos/sitelogo1.svg" type="image/svg+xml">
    </head>
    <body lang="en-US" link="#000080" vlink="#800000" dir="ltr">
	<header>
		Site path links list: 
		<a href="/">starting page of the site<a/>
		|
		<a href="/protocols.htm">Protocols<a/>
		.
	</header>
	<h3>By ArthurGolubev19850316 data structure tree ag85dst1</h3>
	<p>
	AG85DST1 is data structure of the following: every link contains two values which can be either pointers or naught values: if a link has a marking zero-value descender the first value points to the marking zero-value descender link and in another case is naught value, if a link has a marking one-value descender the second value points to that marking one-value descender and in another case is naught value and links are joined so that link-by-link paths link-by-link bit-by-bit represents bits presentation of values.
	</p>
	<p>
Without modifications such data structure is efficient for storing collections, if in links which potentially are terminal for a value to add flags whether the link is terminal for a value or not and space for a value then is efficient for storing dictionaries and is efficient for ordering elements (it requires only putting values into the tree and reading in either zero-first or one-first depth-first order them).
	</p>
	<p>
There is published in 2025-02-26 code with using the data structure which demonstrates idea of ordering using this data structure in public repository services github.com (<a href="https://github.com/ArthurGolubev1985/FastOrderingIdeaDemo">https://github.com/ArthurGolubev1985/FastOrderingIdeaDemo</a>), codeberg.org (<a href="https://codeberg.org/ArthurGolubev1985/FastOrderingIdeaDemo">https://codeberg.org/ArthurGolubev1985/FastOrderingIdeaDemo</a>) and gitflic.ru (<a href="https://gitflic.ru/project/arturische/fastorderingideademo">https://gitflic.ru/project/arturische/fastorderingideademo</a>).
	</p>
  </body>
</html>
